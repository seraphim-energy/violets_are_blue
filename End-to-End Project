# Import necessary libraries
import mlflow
import mlflow.sklearn
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load dataset
X, y = load_iris(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Set up MLflow experiment
mlflow.set_experiment("Iris_Classification")

# Start MLflow run
with mlflow.start_run():
    # Train a RandomForest model
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Predict and evaluate the model
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    
    # Log parameters and metrics to MLflow
    mlflow.log_param("n_estimators", 100)
    mlflow.log_metric("accuracy", accuracy)
    
    # Log the model to MLflow
    mlflow.sklearn.log_model(model, "random_forest_model")

# Dockerfile for deploying the model

dockerfile_content = """
# Use an official Python runtime as a parent image
FROM python:3.8-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]
"""

# Write Dockerfile to disk
with open("Dockerfile", "w") as f:
    f.write(dockerfile_content)

# Requirements for the Docker container (requirements.txt)
requirements_content = """
flask
mlflow==1.30.1
scikit-learn==1.0.2
"""

# Write requirements.txt to disk
with open("requirements.txt", "w") as f:
    f.write(requirements_content)

# Flask app for serving the model (app.py)
flask_app_content = """
from flask import Flask, request, jsonify
import mlflow.sklearn

app = Flask(__name__)

# Load the model from MLflow's registry or local storage if needed.
model = mlflow.sklearn.load_model('random_forest_model')

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json['data']
    prediction = model.predict([data])
    return jsonify({'prediction': prediction.tolist()})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
"""

# Write app.py to disk
with open("app.py", "w") as f:
    f.write(flask_app_content)

