# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification, make_regression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import (confusion_matrix, classification_report, 
                             precision_recall_curve, roc_curve, auc,
                             mean_squared_error)

# Classification Example
# Generate synthetic classification data
X_class, y_class = make_classification(n_samples=1000, n_features=20, n_informative=15, random_state=42)
X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X_class, y_class, test_size=0.2, random_state=42)

# Train a RandomForest Classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_class, y_train_class)
y_pred_class = clf.predict(X_test_class)
y_prob_class = clf.predict_proba(X_test_class)[:, 1]

# Confusion Matrix and Classification Report
conf_matrix = confusion_matrix(y_test_class, y_pred_class)
print("Confusion Matrix:")
print(conf_matrix)

print("\nClassification Report:")
print(classification_report(y_test_class, y_pred_class))

# Precision-Recall Curve
precision, recall, _ = precision_recall_curve(y_test_class, y_prob_class)
plt.figure(figsize=(8, 6))
plt.plot(recall, precision, marker='.', label='Random Forest')
plt.title('Precision-Recall Curve')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.legend()
plt.show()

# ROC Curve and AUC
fpr, tpr, _ = roc_curve(y_test_class, y_prob_class)
roc_auc = auc(fpr, tpr)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc='lower right')
plt.show()

# Regression Example
# Generate synthetic regression data
X_regress, y_regress = make_regression(n_samples=1000, n_features=20, noise=0.1, random_state=42)
X_train_regress, X_test_regress, y_train_regress, y_test_regress = train_test_split(X_regress, y_regress, test_size=0.2, random_state=42)

# Train a RandomForest Regressor
reg = RandomForestRegressor(random_state=42)
reg.fit(X_train_regress, y_train_regress)
y_pred_regress = reg.predict(X_test_regress)

# Calculate MSE and RMSE
mse = mean_squared_error(y_test_regress, y_pred_regress)
rmse = np.sqrt(mse)
print(f"\nRegression Mean Squared Error (MSE): {mse:.2f}")
print(f"Regression Root Mean Squared Error (RMSE): {rmse:.2f}")
